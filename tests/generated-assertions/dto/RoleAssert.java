package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Role} specific assertions - Generated by CustomAssertionGenerator.
 */
public class RoleAssert extends AbstractAssert<RoleAssert, Role> {

  /**
   * Creates a new <code>{@link RoleAssert}</code> to make assertions on actual Role.
   * @param actual the Role we want to make assertions on.
   */
  public RoleAssert(Role actual) {
    super(actual, RoleAssert.class);
  }

  /**
   * An entry point for RoleAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myRole)</code> and get specific assertion with code completion.
   * @param actual the Role we want to make assertions on.
   * @return a new <code>{@link RoleAssert}</code>
   */
  public static RoleAssert assertThat(Role actual) {
    return new RoleAssert(actual);
  }

  /**
   * Verifies that the actual Role's id is equal to the given one.
   * @param id the given id to compare the actual Role's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Role's id is not equal to the given one.
   */
  public RoleAssert hasId(int id) {
    // check that actual Role we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Role's name is equal to the given one.
   * @param name the given name to compare the actual Role's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Role's name is not equal to the given one.
   */
  public RoleAssert hasName(String name) {
    // check that actual Role we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
