package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

/**
 * {@link MaterialBatch} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MaterialBatchAssert extends AbstractAssert<MaterialBatchAssert, MaterialBatch> {

  /**
   * Creates a new <code>{@link MaterialBatchAssert}</code> to make assertions on actual MaterialBatch.
   * @param actual the MaterialBatch we want to make assertions on.
   */
  public MaterialBatchAssert(MaterialBatch actual) {
    super(actual, MaterialBatchAssert.class);
  }

  /**
   * An entry point for MaterialBatchAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMaterialBatch)</code> and get specific assertion with code completion.
   * @param actual the MaterialBatch we want to make assertions on.
   * @return a new <code>{@link MaterialBatchAssert}</code>
   */
  public static MaterialBatchAssert assertThat(MaterialBatch actual) {
    return new MaterialBatchAssert(actual);
  }

  /**
   * Verifies that the actual MaterialBatch's amount is equal to the given one.
   * @param amount the given amount to compare the actual MaterialBatch's amount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MaterialBatch's amount is not equal to the given one.
   */
  public MaterialBatchAssert hasAmount(double amount) {
    // check that actual MaterialBatch we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting amount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualAmount = actual.getAmount();
    if (actualAmount != amount) {
      failWithMessage(assertjErrorMessage, actual, amount, actualAmount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MaterialBatch's amount is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param amount the value to compare the actual MaterialBatch's amount to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual MaterialBatch's amount is not close enough to the given value.
   */
  public MaterialBatchAssert hasAmountCloseTo(double amount, double offset) {
    // check that actual MaterialBatch we want to make assertions on is not null.
    isNotNull();

    double actualAmount = actual.getAmount();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting amount:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualAmount, amount, offset, Math.abs(amount - actualAmount));
    
    // check
    Assertions.assertThat(actualAmount).overridingErrorMessage(assertjErrorMessage).isCloseTo(amount, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MaterialBatch's id is equal to the given one.
   * @param id the given id to compare the actual MaterialBatch's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MaterialBatch's id is not equal to the given one.
   */
  public MaterialBatchAssert hasId(int id) {
    // check that actual MaterialBatch we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MaterialBatch's materialId is equal to the given one.
   * @param materialId the given materialId to compare the actual MaterialBatch's materialId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MaterialBatch's materialId is not equal to the given one.
   */
  public MaterialBatchAssert hasMaterialId(int materialId) {
    // check that actual MaterialBatch we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting materialId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMaterialId = actual.getMaterialId();
    if (actualMaterialId != materialId) {
      failWithMessage(assertjErrorMessage, actual, materialId, actualMaterialId);
    }

    // return the current assertion for method chaining
    return this;
  }

}
