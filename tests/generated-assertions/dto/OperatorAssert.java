package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Operator} specific assertions - Generated by CustomAssertionGenerator.
 */
public class OperatorAssert extends AbstractAssert<OperatorAssert, Operator> {

  /**
   * Creates a new <code>{@link OperatorAssert}</code> to make assertions on actual Operator.
   * @param actual the Operator we want to make assertions on.
   */
  public OperatorAssert(Operator actual) {
    super(actual, OperatorAssert.class);
  }

  /**
   * An entry point for OperatorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOperator)</code> and get specific assertion with code completion.
   * @param actual the Operator we want to make assertions on.
   * @return a new <code>{@link OperatorAssert}</code>
   */
  public static OperatorAssert assertThat(Operator actual) {
    return new OperatorAssert(actual);
  }

  /**
   * Verifies that the actual Operator's cpr is equal to the given one.
   * @param cpr the given cpr to compare the actual Operator's cpr to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Operator's cpr is not equal to the given one.
   */
  public OperatorAssert hasCpr(String cpr) {
    // check that actual Operator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cpr of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCpr = actual.getCpr();
    if (!Objects.areEqual(actualCpr, cpr)) {
      failWithMessage(assertjErrorMessage, actual, cpr, actualCpr);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Operator's id is equal to the given one.
   * @param id the given id to compare the actual Operator's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Operator's id is not equal to the given one.
   */
  public OperatorAssert hasId(int id) {
    // check that actual Operator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Operator's ini is equal to the given one.
   * @param ini the given ini to compare the actual Operator's ini to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Operator's ini is not equal to the given one.
   */
  public OperatorAssert hasIni(String ini) {
    // check that actual Operator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ini of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualIni = actual.getIni();
    if (!Objects.areEqual(actualIni, ini)) {
      failWithMessage(assertjErrorMessage, actual, ini, actualIni);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Operator's name is equal to the given one.
   * @param name the given name to compare the actual Operator's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Operator's name is not equal to the given one.
   */
  public OperatorAssert hasName(String name) {
    // check that actual Operator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Operator's password is equal to the given one.
   * @param password the given password to compare the actual Operator's password to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Operator's password is not equal to the given one.
   */
  public OperatorAssert hasPassword(String password) {
    // check that actual Operator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPassword = actual.getPassword();
    if (!Objects.areEqual(actualPassword, password)) {
      failWithMessage(assertjErrorMessage, actual, password, actualPassword);
    }

    // return the current assertion for method chaining
    return this;
  }

}
