package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link MaterialTest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MaterialTestAssert extends AbstractAssert<MaterialTestAssert, MaterialTest> {

  /**
   * Creates a new <code>{@link MaterialTestAssert}</code> to make assertions on actual MaterialTest.
   * @param actual the MaterialTest we want to make assertions on.
   */
  public MaterialTestAssert(MaterialTest actual) {
    super(actual, MaterialTestAssert.class);
  }

  /**
   * An entry point for MaterialTestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMaterialTest)</code> and get specific assertion with code completion.
   * @param actual the MaterialTest we want to make assertions on.
   * @return a new <code>{@link MaterialTestAssert}</code>
   */
  public static MaterialTestAssert assertThat(MaterialTest actual) {
    return new MaterialTestAssert(actual);
  }

  /**
   * Verifies that the actual MaterialTest's source is equal to the given one.
   * @param source the given source to compare the actual MaterialTest's source to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MaterialTest's source is not equal to the given one.
   */
  public MaterialTestAssert hasSource(org.assertj.db.type.Source source) {
    // check that actual MaterialTest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting source of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.assertj.db.type.Source actualSource = actual.source;
    if (!Objects.areEqual(actualSource, source)) {
      failWithMessage(assertjErrorMessage, actual, source, actualSource);
    }

    // return the current assertion for method chaining
    return this;
  }

}
