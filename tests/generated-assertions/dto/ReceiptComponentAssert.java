package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

/**
 * {@link ReceiptComponent} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ReceiptComponentAssert extends AbstractAssert<ReceiptComponentAssert, ReceiptComponent> {

  /**
   * Creates a new <code>{@link ReceiptComponentAssert}</code> to make assertions on actual ReceiptComponent.
   * @param actual the ReceiptComponent we want to make assertions on.
   */
  public ReceiptComponentAssert(ReceiptComponent actual) {
    super(actual, ReceiptComponentAssert.class);
  }

  /**
   * An entry point for ReceiptComponentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReceiptComponent)</code> and get specific assertion with code completion.
   * @param actual the ReceiptComponent we want to make assertions on.
   * @return a new <code>{@link ReceiptComponentAssert}</code>
   */
  public static ReceiptComponentAssert assertThat(ReceiptComponent actual) {
    return new ReceiptComponentAssert(actual);
  }

  /**
   * Verifies that the actual ReceiptComponent's materialId is equal to the given one.
   * @param materialId the given materialId to compare the actual ReceiptComponent's materialId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's materialId is not equal to the given one.
   */
  public ReceiptComponentAssert hasMaterialId(int materialId) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting materialId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMaterialId = actual.getMaterialId();
    if (actualMaterialId != materialId) {
      failWithMessage(assertjErrorMessage, actual, materialId, actualMaterialId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReceiptComponent's nomNetto is equal to the given one.
   * @param nomNetto the given nomNetto to compare the actual ReceiptComponent's nomNetto to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's nomNetto is not equal to the given one.
   */
  public ReceiptComponentAssert hasNomNetto(double nomNetto) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nomNetto of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualNomNetto = actual.getNomNetto();
    if (actualNomNetto != nomNetto) {
      failWithMessage(assertjErrorMessage, actual, nomNetto, actualNomNetto);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReceiptComponent's nomNetto is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param nomNetto the value to compare the actual ReceiptComponent's nomNetto to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's nomNetto is not close enough to the given value.
   */
  public ReceiptComponentAssert hasNomNettoCloseTo(double nomNetto, double offset) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    double actualNomNetto = actual.getNomNetto();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting nomNetto:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualNomNetto, nomNetto, offset, Math.abs(nomNetto - actualNomNetto));
    
    // check
    Assertions.assertThat(actualNomNetto).overridingErrorMessage(assertjErrorMessage).isCloseTo(nomNetto, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReceiptComponent's receiptId is equal to the given one.
   * @param receiptId the given receiptId to compare the actual ReceiptComponent's receiptId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's receiptId is not equal to the given one.
   */
  public ReceiptComponentAssert hasReceiptId(int receiptId) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting receiptId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualReceiptId = actual.getReceiptId();
    if (actualReceiptId != receiptId) {
      failWithMessage(assertjErrorMessage, actual, receiptId, actualReceiptId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReceiptComponent's tolerance is equal to the given one.
   * @param tolerance the given tolerance to compare the actual ReceiptComponent's tolerance to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's tolerance is not equal to the given one.
   */
  public ReceiptComponentAssert hasTolerance(double tolerance) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tolerance of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualTolerance = actual.getTolerance();
    if (actualTolerance != tolerance) {
      failWithMessage(assertjErrorMessage, actual, tolerance, actualTolerance);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReceiptComponent's tolerance is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param tolerance the value to compare the actual ReceiptComponent's tolerance to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReceiptComponent's tolerance is not close enough to the given value.
   */
  public ReceiptComponentAssert hasToleranceCloseTo(double tolerance, double offset) {
    // check that actual ReceiptComponent we want to make assertions on is not null.
    isNotNull();

    double actualTolerance = actual.getTolerance();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting tolerance:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualTolerance, tolerance, offset, Math.abs(tolerance - actualTolerance));
    
    // check
    Assertions.assertThat(actualTolerance).overridingErrorMessage(assertjErrorMessage).isCloseTo(tolerance, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

}
