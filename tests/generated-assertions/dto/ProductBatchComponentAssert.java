package dto;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

/**
 * {@link ProductBatchComponent} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProductBatchComponentAssert extends AbstractAssert<ProductBatchComponentAssert, ProductBatchComponent> {

  /**
   * Creates a new <code>{@link ProductBatchComponentAssert}</code> to make assertions on actual ProductBatchComponent.
   * @param actual the ProductBatchComponent we want to make assertions on.
   */
  public ProductBatchComponentAssert(ProductBatchComponent actual) {
    super(actual, ProductBatchComponentAssert.class);
  }

  /**
   * An entry point for ProductBatchComponentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myProductBatchComponent)</code> and get specific assertion with code completion.
   * @param actual the ProductBatchComponent we want to make assertions on.
   * @return a new <code>{@link ProductBatchComponentAssert}</code>
   */
  public static ProductBatchComponentAssert assertThat(ProductBatchComponent actual) {
    return new ProductBatchComponentAssert(actual);
  }

  /**
   * Verifies that the actual ProductBatchComponent's materialBatchId is equal to the given one.
   * @param materialBatchId the given materialBatchId to compare the actual ProductBatchComponent's materialBatchId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's materialBatchId is not equal to the given one.
   */
  public ProductBatchComponentAssert hasMaterialBatchId(int materialBatchId) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting materialBatchId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMaterialBatchId = actual.getMaterialBatchId();
    if (actualMaterialBatchId != materialBatchId) {
      failWithMessage(assertjErrorMessage, actual, materialBatchId, actualMaterialBatchId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's netto is equal to the given one.
   * @param netto the given netto to compare the actual ProductBatchComponent's netto to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's netto is not equal to the given one.
   */
  public ProductBatchComponentAssert hasNetto(double netto) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting netto of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualNetto = actual.getNetto();
    if (actualNetto != netto) {
      failWithMessage(assertjErrorMessage, actual, netto, actualNetto);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's netto is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param netto the value to compare the actual ProductBatchComponent's netto to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's netto is not close enough to the given value.
   */
  public ProductBatchComponentAssert hasNettoCloseTo(double netto, double offset) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    double actualNetto = actual.getNetto();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting netto:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualNetto, netto, offset, Math.abs(netto - actualNetto));
    
    // check
    Assertions.assertThat(actualNetto).overridingErrorMessage(assertjErrorMessage).isCloseTo(netto, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's operatorId is equal to the given one.
   * @param operatorId the given operatorId to compare the actual ProductBatchComponent's operatorId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's operatorId is not equal to the given one.
   */
  public ProductBatchComponentAssert hasOperatorId(int operatorId) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting operatorId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualOperatorId = actual.getOperatorId();
    if (actualOperatorId != operatorId) {
      failWithMessage(assertjErrorMessage, actual, operatorId, actualOperatorId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's productBatchId is equal to the given one.
   * @param productBatchId the given productBatchId to compare the actual ProductBatchComponent's productBatchId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's productBatchId is not equal to the given one.
   */
  public ProductBatchComponentAssert hasProductBatchId(int productBatchId) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting productBatchId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualProductBatchId = actual.getProductBatchId();
    if (actualProductBatchId != productBatchId) {
      failWithMessage(assertjErrorMessage, actual, productBatchId, actualProductBatchId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's tara is equal to the given one.
   * @param tara the given tara to compare the actual ProductBatchComponent's tara to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's tara is not equal to the given one.
   */
  public ProductBatchComponentAssert hasTara(double tara) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tara of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualTara = actual.getTara();
    if (actualTara != tara) {
      failWithMessage(assertjErrorMessage, actual, tara, actualTara);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductBatchComponent's tara is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param tara the value to compare the actual ProductBatchComponent's tara to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductBatchComponent's tara is not close enough to the given value.
   */
  public ProductBatchComponentAssert hasTaraCloseTo(double tara, double offset) {
    // check that actual ProductBatchComponent we want to make assertions on is not null.
    isNotNull();

    double actualTara = actual.getTara();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting tara:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualTara, tara, offset, Math.abs(tara - actualTara));
    
    // check
    Assertions.assertThat(actualTara).overridingErrorMessage(assertjErrorMessage).isCloseTo(tara, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

}
